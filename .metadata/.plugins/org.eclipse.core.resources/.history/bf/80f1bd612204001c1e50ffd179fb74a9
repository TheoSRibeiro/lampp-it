package com.lamppit.desafio.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;


@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter{
	@Autowired
    private Environment env;

    private static final String[] PUBLIC_MATCHERS = {
        "/postgresql/**",
    };

    private static final String[] PUBLIC_MATCHERS_GET = {
        "/projetos/**"
    };

    private static final String[] PUBLIC_MATCHERS_POST = {
        "/projetos/**"
    };

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        //dar acesso ao h2
        if(Arrays.asList(env.getActiveProfiles()).contains("test")){//atribuir acesso somente para teste
            http.headers().frameOptions().disable();
        }

        http.cors().and().csrf().disable(); //desabilitar a secao do usuario
        http.authorizeRequests()
            .antMatchers(HttpMethod.POST, PUBLIC_MATCHERS_POST).permitAll()
            .antMatchers(HttpMethod.GET, PUBLIC_MATCHERS_GET).permitAll()
            .antMatchers(PUBLIC_MATCHERS).permitAll()
            .anyRequest().authenticated();
    }
}
